
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000288  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a35  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000684  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041a  00000000  00000000  000014b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c7  00000000  00000000  00001d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  7a:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_data>:
#define LED_GREEN PORTA4
#define LED_RED PORTA5

 void lcd_data(unsigned char data)  //for writing data to LCD
 {
	 PORTC = data>>4 ;
  82:	98 2f       	mov	r25, r24
  84:	92 95       	swap	r25
  86:	9f 70       	andi	r25, 0x0F	; 15
  88:	95 bb       	out	0x15, r25	; 21
	 PORTC |=(1<<RS);  //RS=1
  8a:	95 b3       	in	r25, 0x15	; 21
  8c:	90 64       	ori	r25, 0x40	; 64
  8e:	95 bb       	out	0x15, r25	; 21
	 PORTC &=(~(1<<RW));  //RW=0
  90:	95 b3       	in	r25, 0x15	; 21
  92:	9f 7d       	andi	r25, 0xDF	; 223
  94:	95 bb       	out	0x15, r25	; 21
	 PORTC |=(1<<EN);  //EN=1
  96:	95 b3       	in	r25, 0x15	; 21
  98:	90 61       	ori	r25, 0x10	; 16
  9a:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	ef e9       	ldi	r30, 0x9F	; 159
  9e:	ff e0       	ldi	r31, 0x0F	; 15
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_data+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_data+0x24>
  a6:	00 00       	nop
	 _delay_ms(10);  //10ms
	 PORTC &=(~(1<<EN)); //EN=0
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	9f 7e       	andi	r25, 0xEF	; 239
  ac:	95 bb       	out	0x15, r25	; 21
	 
	 	 PORTC = (data & 0x0F);
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	85 bb       	out	0x15, r24	; 21
	 	 PORTC |=(1<<RS);  //RS=1
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	85 bb       	out	0x15, r24	; 21
	 	 PORTC &=(~(1<<RW));  //RW=0
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	85 bb       	out	0x15, r24	; 21
	 	 PORTC |=(1<<EN);  //EN=1
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_data+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_data+0x4c>
  ce:	00 00       	nop
	 	 _delay_ms(10);  //10ms
	 	 PORTC &=(~(1<<EN)); //EN=0
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	08 95       	ret

000000d8 <lcd_cmd>:
 }
 
 void lcd_cmd(unsigned char command)  //used to write instruction to LCD
 {
	 PORTC = command>>4;
  d8:	98 2f       	mov	r25, r24
  da:	92 95       	swap	r25
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	95 bb       	out	0x15, r25	; 21
	 PORTC &= (~(1<<RS)); //RS=0
  e0:	95 b3       	in	r25, 0x15	; 21
  e2:	9f 7b       	andi	r25, 0xBF	; 191
  e4:	95 bb       	out	0x15, r25	; 21
	 PORTC &= (~(1<<RW));  //RW=0
  e6:	95 b3       	in	r25, 0x15	; 21
  e8:	9f 7d       	andi	r25, 0xDF	; 223
  ea:	95 bb       	out	0x15, r25	; 21
	 PORTC |= (1<<EN);	//EN=1
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	90 61       	ori	r25, 0x10	; 16
  f0:	95 bb       	out	0x15, r25	; 21
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_cmd+0x1e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_cmd+0x24>
  fc:	00 00       	nop
	 _delay_ms(10);		//10ms
	 PORTC &= (~(1<<EN));	//EN=0
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	9f 7e       	andi	r25, 0xEF	; 239
 102:	95 bb       	out	0x15, r25	; 21
	 
	 	 PORTC = (command & 0x0F);
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	85 bb       	out	0x15, r24	; 21
	 	 PORTC &= (~(1<<RS)); //RS=0
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	85 bb       	out	0x15, r24	; 21
	 	 PORTC &= (~(1<<RW));  //RW=0
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	85 bb       	out	0x15, r24	; 21
	 	 PORTC |= (1<<EN);	//EN=1
 114:	85 b3       	in	r24, 0x15	; 21
 116:	80 61       	ori	r24, 0x10	; 16
 118:	85 bb       	out	0x15, r24	; 21
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_cmd+0x46>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_cmd+0x4c>
 124:	00 00       	nop
	 	 _delay_ms(10);		//10ms
	 	 PORTC &= (~(1<<EN));	//EN=0
 126:	85 b3       	in	r24, 0x15	; 21
 128:	8f 7e       	andi	r24, 0xEF	; 239
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	08 95       	ret

0000012e <lcd_string>:
 }

 void lcd_string(const unsigned char *str,unsigned char length)
 {
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	8c 01       	movw	r16, r24
 138:	d6 2f       	mov	r29, r22
	 char i=0;
	 for(i=0;i<length;i++)
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	07 c0       	rjmp	.+14     	; 0x14c <lcd_string+0x1e>
	 {
		 lcd_data(str[i]);
 13e:	f8 01       	movw	r30, r16
 140:	ec 0f       	add	r30, r28
 142:	f1 1d       	adc	r31, r1
 144:	80 81       	ld	r24, Z
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
 }

 void lcd_string(const unsigned char *str,unsigned char length)
 {
	 char i=0;
	 for(i=0;i<length;i++)
 14a:	cf 5f       	subi	r28, 0xFF	; 255
 14c:	cd 17       	cp	r28, r29
 14e:	b8 f3       	brcs	.-18     	; 0x13e <lcd_string+0x10>
	 {
		 lcd_data(str[i]);
	 }
 }
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <lcd_initialise>:
 void lcd_initialise()
 {
	 //lcd_cmd(0x38);
	 lcd_cmd(0x02);   //
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	 //lcd_cmd(0x20);
	 lcd_cmd(0x28);  //4bit mode
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	 lcd_cmd(0x06); //Entry Mode
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	 lcd_cmd(0x0c); //display ON curson OFF
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	 lcd_cmd(0x01);   //clear the display
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
 178:	08 95       	ret

0000017a <__vector_2>:
	 }
 }


ISR(INT1_vect)  //int1 interrupt function
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	lcd_cmd(0x01);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_cmd(0x80);
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_string("You are in Therapy!",19);
 1a8:	63 e1       	ldi	r22, 0x13	; 19
 1aa:	80 e6       	ldi	r24, 0x60	; 96
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_string>
	
}	
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <menu_display>:
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9c e9       	ldi	r25, 0x9C	; 156
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <menu_display+0x4>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <menu_display+0xa>
 1de:	00 00       	nop
}*/
void menu_display()
{
	//screen1:
	_delay_ms(100);
	lcd_cmd(0x01);  //clear display
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_cmd(0x80);   //line1
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_string("SARASO PVT LTD",14);
 1ec:	6e e0       	ldi	r22, 0x0E	; 14
 1ee:	84 e7       	ldi	r24, 0x74	; 116
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_string>
	lcd_cmd(0xC0);    //line2
 1f6:	80 ec       	ldi	r24, 0xC0	; 192
 1f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_string("SELECT OPTIONS:",15);
 1fc:	6f e0       	ldi	r22, 0x0F	; 15
 1fe:	83 e8       	ldi	r24, 0x83	; 131
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_string>
	lcd_cmd(0x94);    // line3
 206:	84 e9       	ldi	r24, 0x94	; 148
 208:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_string(">THERAPY",8);
 20c:	68 e0       	ldi	r22, 0x08	; 8
 20e:	83 e9       	ldi	r24, 0x93	; 147
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_string>
	lcd_cmd(0xD4);   //line 4
 216:	84 ed       	ldi	r24, 0xD4	; 212
 218:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
	lcd_string("SETTINGS",8);
 21c:	68 e0       	ldi	r22, 0x08	; 8
 21e:	8c e9       	ldi	r24, 0x9C	; 156
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_string>
	
	//PORTA=0x30;     // Put value for PortA i.e. LED
	PORTA |= (1<<LED_GREEN) | (1<<LED_RED);
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	80 63       	ori	r24, 0x30	; 48
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	9f ef       	ldi	r25, 0xFF	; 255
 22e:	29 e6       	ldi	r18, 0x69	; 105
 230:	88 e1       	ldi	r24, 0x18	; 24
 232:	91 50       	subi	r25, 0x01	; 1
 234:	20 40       	sbci	r18, 0x00	; 0
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 23c:	00 00       	nop
	_delay_ms(5000);
	PORTA &= ~(1<<LED_GREEN) & ~(1<<LED_RED);
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	8f 7c       	andi	r24, 0xCF	; 207
 242:	8b bb       	out	0x1b, r24	; 27
 244:	9f ef       	ldi	r25, 0xFF	; 255
 246:	29 e6       	ldi	r18, 0x69	; 105
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	91 50       	subi	r25, 0x01	; 1
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 252:	00 c0       	rjmp	.+0      	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <main>:
 }


 int main(void)
 {
	sei();    //enabling status register
 258:	78 94       	sei
	GICR |= (1<<INT0) | (1<<INT1); //Enable General Intruppt control register
 25a:	8b b7       	in	r24, 0x3b	; 59
 25c:	80 6c       	ori	r24, 0xC0	; 192
 25e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (0<<ISC10) | (1<<ISC11); // |(1<<ISC00)| (1<<ISC01); 	 //MCUCR register, raising interrupt on pullup or rising edge. ISC11, ISC10 for INT1 and ISC01, ISC00 for INT0
 260:	85 b7       	in	r24, 0x35	; 53
 262:	88 60       	ori	r24, 0x08	; 8
 264:	85 bf       	out	0x35, r24	; 53
	 DDRC = 0xFF;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	84 bb       	out	0x14, r24	; 20
	 DDRA=0x30;
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	8a bb       	out	0x1a, r24	; 26
	 DDRD &= ~(1 << BUTTON_PIN);   //setting button register port as Input i.e 0
 26e:	81 b3       	in	r24, 0x11	; 17
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	81 bb       	out	0x11, r24	; 17
 	 PORTD |= (1 << BUTTON_PIN);   //setting port register as output
 274:	82 b3       	in	r24, 0x12	; 18
 276:	88 60       	ori	r24, 0x08	; 8
 278:	82 bb       	out	0x12, r24	; 18
	 //DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
	 lcd_initialise();
 27a:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_initialise>
	 
	 menu_display();   //calling menu_display function
 27e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <menu_display>
 282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x2a>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
